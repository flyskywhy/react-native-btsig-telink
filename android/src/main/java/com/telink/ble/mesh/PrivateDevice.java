package com.telink.ble.mesh;

import com.telink.ble.mesh.entity.BindingDevice;

/**
 * composition raw data used when binding
 * {@link BindingDevice#isDefaultBound()}
 * Created by kee on 2019/2/27.
 */
public enum PrivateDevice {

    // PANEL(0x0211, 0x07, "panel",
    //         new byte[]{(byte) 0x11, (byte) 0x02,
    //                 (byte) 0x07, (byte) 0x00,
    //                 (byte) 0x32, (byte) 0x37,
    //                 (byte) 0x69, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0x00
    //                 , (byte) 0x02, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0xfe, (byte) 0x01, (byte) 0xfe, (byte) 0x02, (byte) 0xfe, (byte) 0x00, (byte) 0xff
    //                 , (byte) 0x01, (byte) 0xff, (byte) 0x00, (byte) 0x12, (byte) 0x01, (byte) 0x12, (byte) 0x00, (byte) 0x10, (byte) 0x03, (byte) 0x12, (byte) 0x04, (byte) 0x12, (byte) 0x06, (byte) 0x12, (byte) 0x07, (byte) 0x12
    //                 , (byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x11, (byte) 0x02, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x01, (byte) 0x00, (byte) 0x10, (byte) 0x03, (byte) 0x12
    //                 , (byte) 0x04, (byte) 0x12, (byte) 0x06, (byte) 0x12, (byte) 0x07, (byte) 0x12, (byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x01, (byte) 0x00, (byte) 0x10
    //                 , (byte) 0x03, (byte) 0x12, (byte) 0x04, (byte) 0x12, (byte) 0x06, (byte) 0x12, (byte) 0x07, (byte) 0x12, (byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0x00}),

    // CT(0x0211, 0x01, "ct",
    //         new byte[]{
    //                 (byte) 0x11, (byte) 0x02,
    //                 (byte) 0x01, (byte) 0x00,
    //                 (byte) 0x32, (byte) 0x37,
    //                 (byte) 0x69, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19, (byte) 0x01, (byte) 0x00, (byte) 0x00
    //                 , (byte) 0x02, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0xfe, (byte) 0x01, (byte) 0xfe, (byte) 0x02, (byte) 0xfe, (byte) 0x00, (byte) 0xff
    //                 , (byte) 0x01, (byte) 0xff, (byte) 0x00, (byte) 0x12, (byte) 0x01, (byte) 0x12, (byte) 0x00, (byte) 0x10, (byte) 0x02, (byte) 0x10, (byte) 0x04, (byte) 0x10, (byte) 0x06, (byte) 0x10, (byte) 0x07, (byte) 0x10
    //                 , (byte) 0x03, (byte) 0x12, (byte) 0x04, (byte) 0x12, (byte) 0x06, (byte) 0x12, (byte) 0x07, (byte) 0x12, (byte) 0x00, (byte) 0x13, (byte) 0x01, (byte) 0x13, (byte) 0x03, (byte) 0x13, (byte) 0x04, (byte) 0x13
    //                 , (byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x02, (byte) 0x10, (byte) 0x06, (byte) 0x13}),
    // HSL(0x0211, 0x02, "hsl",
    //         new byte[]{
    //                 (byte) 0x11, (byte) 0x02, // cid
    //                 (byte) 0x02, (byte) 0x00, // pid
    //                 (byte) 0x33, (byte) 0x31, // vid
    //                 (byte) 0x69, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x11, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x04, (byte) 0x00,
    //                 (byte) 0x00, (byte) 0xFE, (byte) 0x01, (byte) 0xFE, (byte) 0x00, (byte) 0xFF, (byte) 0x01, (byte) 0xFF, (byte) 0x00, (byte) 0x10, (byte) 0x02, (byte) 0x10, (byte) 0x04, (byte) 0x10, (byte) 0x06, (byte) 0x10,
    //                 (byte) 0x07, (byte) 0x10, (byte) 0x00, (byte) 0x13, (byte) 0x01, (byte) 0x13, (byte) 0x07, (byte) 0x13, (byte) 0x08, (byte) 0x13, (byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
    //                 (byte) 0x02, (byte) 0x00, (byte) 0x02, (byte) 0x10, (byte) 0x0A, (byte) 0x13, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x02, (byte) 0x10, (byte) 0x0B, (byte) 0x13
    //         }),
    // LPN(0x0211, 0x0201, "lpn",
    //         new byte[]{
    //                 (byte) 0x11, (byte) 0x02, // cid
    //                 0x01, 0x02,// pid
    //                 (byte) 0x33, (byte) 0x33, // vid
    //                 0x69, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x10, 0x02, 0x10, 0x11, 0x02, 0x00, 0x00
    //         });

    // when cpsData is changed by the change of element or model in firmware, FB00[] is also need changed here and in
    // DeviceTypeModel of react-native-btsig-telink/SigMeshOC/SigMeshOC/Model.m
    //
    // note onProvisionSuccess() in TelinkBtSigNativeModule.java about FB
    // note filter() here about FB00
    //
    // Only need describe 0xFB00 here, because it will be e.g. 0xFB78 in onProvisionSuccess() of TelinkBtSigNativeModule.java
    // The version (byte) 0x31, (byte) 0x32 also will be replaced in onProvisionSuccess() of TelinkBtSigNativeModule.java
    FB00(0x0211, 0xFB00, "lightstring",
            new byte[]{(byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0xFB, (byte) 0x31, (byte) 0x32, (byte) 0x69, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x13, (byte) 0x01, (byte) 0x00, (byte) 0x00
                    , (byte) 0x02, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0x01, (byte) 0xFE, (byte) 0x00, (byte) 0xFF, (byte) 0x01, (byte) 0xFF, (byte) 0x00, (byte) 0x12
                    , (byte) 0x01, (byte) 0x12, (byte) 0x00, (byte) 0x10, (byte) 0x02, (byte) 0x10, (byte) 0x04, (byte) 0x10, (byte) 0x06, (byte) 0x10, (byte) 0x07, (byte) 0x10, (byte) 0x06, (byte) 0x12, (byte) 0x07, (byte) 0x12
                    , (byte) 0x00, (byte) 0x13, (byte) 0x01, (byte) 0x13, (byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0x00}),
    FC00(0x0211, 0xFC00, "lightstring",
            new byte[]{(byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0xFC, (byte) 0x31, (byte) 0x32, (byte) 0x69, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x13, (byte) 0x01, (byte) 0x00, (byte) 0x00
                    , (byte) 0x02, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0x01, (byte) 0xFE, (byte) 0x00, (byte) 0xFF, (byte) 0x01, (byte) 0xFF, (byte) 0x00, (byte) 0x12
                    , (byte) 0x01, (byte) 0x12, (byte) 0x00, (byte) 0x10, (byte) 0x02, (byte) 0x10, (byte) 0x04, (byte) 0x10, (byte) 0x06, (byte) 0x10, (byte) 0x07, (byte) 0x10, (byte) 0x06, (byte) 0x12, (byte) 0x07, (byte) 0x12
                    , (byte) 0x00, (byte) 0x13, (byte) 0x01, (byte) 0x13, (byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0x00}),
    FD00(0x0211, 0xFD00, "lightstring",
            new byte[]{(byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0xFD, (byte) 0x31, (byte) 0x32, (byte) 0x69, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x13, (byte) 0x01, (byte) 0x00, (byte) 0x00
                    , (byte) 0x02, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0x01, (byte) 0xFE, (byte) 0x00, (byte) 0xFF, (byte) 0x01, (byte) 0xFF, (byte) 0x00, (byte) 0x12
                    , (byte) 0x01, (byte) 0x12, (byte) 0x00, (byte) 0x10, (byte) 0x02, (byte) 0x10, (byte) 0x04, (byte) 0x10, (byte) 0x06, (byte) 0x10, (byte) 0x07, (byte) 0x10, (byte) 0x06, (byte) 0x12, (byte) 0x07, (byte) 0x12
                    , (byte) 0x00, (byte) 0x13, (byte) 0x01, (byte) 0x13, (byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0x00}),
    FA00(0x0211, 0xFA00, "lightstring",
            new byte[]{(byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0xFA, (byte) 0x31, (byte) 0x32, (byte) 0x69, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x13, (byte) 0x01, (byte) 0x00, (byte) 0x00
                    , (byte) 0x02, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0x01, (byte) 0xFE, (byte) 0x00, (byte) 0xFF, (byte) 0x01, (byte) 0xFF, (byte) 0x00, (byte) 0x12
                    , (byte) 0x01, (byte) 0x12, (byte) 0x00, (byte) 0x10, (byte) 0x02, (byte) 0x10, (byte) 0x04, (byte) 0x10, (byte) 0x06, (byte) 0x10, (byte) 0x07, (byte) 0x10, (byte) 0x06, (byte) 0x12, (byte) 0x07, (byte) 0x12
                    , (byte) 0x00, (byte) 0x13, (byte) 0x01, (byte) 0x13, (byte) 0x11, (byte) 0x02, (byte) 0x00, (byte) 0x00});

    PrivateDevice(int vid, int pid, String name, byte[] cpsData) {
        this.vid = vid;
        this.pid = pid;
        this.name = name;
        this.cpsData = cpsData;
    }

    private final int vid;
    private final int pid;
    private final String name;
    private final byte[] cpsData;

    public int getVid() {
        return vid;
    }

    public int getPid() {
        return pid;
    }

    public String getName() {
        return name;
    }

    public byte[] getCpsData() {
        return cpsData;
    }

    /**
     * check private device
     *
     * @param deviceUUID deviceUUID from scanRecord
     * @return preset device
     */
    public static PrivateDevice filter(byte[] deviceUUID) {
        if (deviceUUID.length < 3) return null;
        int vid = (deviceUUID[0] & 0xFF) + (((deviceUUID[1] & 0xFF) << 8));
        int pid = (deviceUUID[2] & 0xFF) + (((deviceUUID[3] & 0xFF) << 8));
        PrivateDevice[] values = PrivateDevice.values();
        for (PrivateDevice device :
                values) {
            if (device.vid == vid) {
                if ((pid & 0xFF00) == 0xFB00 && device.pid == 0xFB00) {
                    return device;
                } else if ((pid & 0xFF00) == 0xFA00 && device.pid == 0xFA00) {
                    return device;
                } else if ((pid & 0xFF00) == 0xFC00 && device.pid == 0xFC00) {
                    return device;
                } else if ((pid & 0xFF00) == 0xFD00 && device.pid == 0xFD00) {
                    return device;
                } else if (device.pid == pid) {
                    return device;
                }
            }
        }
        return null;

    }
}
