
/* to tell the linker the program begin from __start label in cstartup.s, thus do not treat it as a unused symbol */
ENTRY(__start)

SECTIONS
{
    . = 0x0;
        .vectors :
        {
        *(.vectors)
        *(.vectors.*)	/* MUST as follows, when compile with -ffunction-sections -fdata-sections, session name may changed */
        }
        .ram_code :
        {
        *(.ram_code)
        *(.ram_code.*)
        }
        
    . = (((. + 3) / 4)*4);
        PROVIDE(_rstored_ = . );
        
        
    PROVIDE(_ramcode_size_ = . );
	PROVIDE(_ramcode_size_div_16_ = (. + 15 ) / 16);
	PROVIDE(_ramcode_size_div_256_ = (. + 255) / 256);
	PROVIDE(_ramcode_size_div_16_align_256_ = ( (. + 255) / 256) * 16);
	PROVIDE(_ramcode_size_align_256_ = ( _ramcode_size_div_16_align_256_)* 16);

    . = . * (1 - __RETENTION_EN) + (__RETENTION_SIZE_DIV_256 * 256) * __RETENTION_EN; 	
        .text :
        {
        *(.text)
        *(.text.*)
        }
        .rodata :
        {
        *(.rodata)
        *(.rodata.*)
        }

    . = (((. + 3) / 4)*4);
        PROVIDE(_dstored_ = .);
        PROVIDE(_code_size_ = .);

 	. = (0x840000 + (_rstored_));
        .retention_data :
          AT ( _rstored_ )
        {
        . = (((. + 3) / 4)*4);
        PROVIDE(_retention_data_start_ = . );
        *(.retention_data)
        *(.retention_data.*)
         *(.data);
         *(.data.*);
        . = (((. + 3) / 4)*4);
        PROVIDE(_retention_data_end_ = . );
        }        

        .bss :	/*is retention too.*/
        {
	. = (((. + 3) / 4)*4);
	    PROVIDE(_start_bss_ = .);
        *(.sbss)
        *(.sbss.*)
        *(.bss)
        *(.bss.*)
        }
    . = (((. + 3) / 4)*4);
    PROVIDE(_end_bss_ = .); /*_end_bss_ must outside of {}, if not it will not correct*/
          
	. = 0x808900 + (0x38000 * __825x_EN) + (_ramcode_size_div_256_ * 0x100)*(1 - __RETENTION_EN) + (__RETENTION_SIZE_DIV_256 * 256) * __RETENTION_EN;	/* 0x100 alighned, must greater than or equal to:0x808000 + ram_code_size +  irq_vector(0x100) + IC_tag(0x100) + IC_cache(0x800) == 0x808a00 + ram_code_size */
        .data :
          AT ( _dstored_ )
         {
    . = (((. + 3) / 4)*4);
         PROVIDE(_start_data_ = . );
         *(.no_retention_data)
         *(.no_retention_data.*)
    . = (((. + 3) / 4)*4);
         PROVIDE(_end_data_ = . );
         }

    PROVIDE(_bin_size_ = _code_size_ + _end_data_ - _start_data_);
    PROVIDE(_bin_size_div_16_ = (_bin_size_ + 15 ) / 16);
    PROVIDE(_ictag_start_ = 0x808000 + (0x38000 * __825x_EN) + (_ramcode_size_div_256_) * 0x100);		/*not for retention*/
    PROVIDE(_ictag_end_ = 0x808000 + (0x38000 * __825x_EN) + (_ramcode_size_div_256_ + 1) * 0x100);	/*not for retention*/
    
	PROVIDE(_ram_use_size_div_16_ = (_retention_data_end_ - 0x840000  + 15 ) / 16); /*only for 825x*/
    
}
